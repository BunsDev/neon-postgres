name: 'Create Neon Project'
description: 'Create Neon Project using API'

inputs:
  api_key:
    description: 'Neon API key'
    required: true
  region_id:
    description: 'Region ID, if not set the project will be created in the default region'
    default: aws-us-east-2
  postgres_version:
    description: 'Postgres version; default is 16'
    default: '16'
  api_host:
    description: 'Neon API host'
    default: console-stage.neon.build
  compute_units:
    description: '[Min, Max] compute units'
    default: '[1, 1]'
  shard-split-project:
    description: 'by default new projects are not shard-split, specify true to shard-split'
    required: false
    default: 'false'
  shard-count:
    description: 'Number of shards to split the project into, only applies if shard-split-project is true'
    required: false
    default: '8'
  stripe-size:
    description: 'Stripe size, optional, in 8kiB pages.  e.g. set 2048 for 16MB stripes. Default is 128 MiB, only applies if shard-split-project is true'
    required: false
    default: '32768'
  

outputs:
  dsn:
    description: 'Created Project DSN (for main database)'
    value: ${{ steps.create-neon-project.outputs.dsn }}
  project_id:
    description: 'Created Project ID'
    value: ${{ steps.create-neon-project.outputs.project_id }}

runs:
  using: "composite"
  steps:
    - name: Create Neon Project
      id: create-neon-project
      # A shell without `set -x` to not to expose password/dsn in logs
      shell: bash -euo pipefail {0}
      run: |
        project=$(curl \
          "https://${API_HOST}/api/v2/projects" \
          --fail \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --header "Authorization: Bearer ${API_KEY}" \
          --data "{
            \"project\": {
              \"name\": \"Created by actions/neon-project-create; GITHUB_RUN_ID=${GITHUB_RUN_ID}\",
              \"pg_version\": ${POSTGRES_VERSION},
              \"region_id\": \"${REGION_ID}\",
              \"provisioner\": \"k8s-neonvm\",
              \"autoscaling_limit_min_cu\": ${MIN_CU},
              \"autoscaling_limit_max_cu\": ${MAX_CU},
              \"settings\": { }
            }
          }")

        # Mask password
        echo "::add-mask::$(echo $project | jq --raw-output '.roles[] | select(.name != "web_access") | .password')"

        dsn=$(echo $project | jq --raw-output '.connection_uris[0].connection_uri')
        echo "::add-mask::${dsn}"
        echo "dsn=${dsn}" >> $GITHUB_OUTPUT

        project_id=$(echo $project | jq --raw-output '.project.id')
        echo "project_id=${project_id}" >> $GITHUB_OUTPUT

        echo "Project ${project_id} has been created"

        if [ "${SHARD_SPLIT_PROJECT}" = "true" ]; then
          # determine tenant ID
          TENANT_ID=`${PSQL} ${dsn} -t -A -c "SHOW neon.tenant_id"`
          
          echo "Splitting project ${project_id} with tenant_id ${TENANT_ID} into $((SHARD_COUNT)) shards with stripe size $((STRIPE_SIZE))"

          echo "curl -X PUT https://${API_HOST}/regions/${REGION_ID}/api/v1/admin/storage/proxy/control/v1/tenant/${TENANT_ID}/shard_split with body {\"new_shard_count\": $((SHARD_COUNT)), \"new_stripe_size\": $((STRIPE_SIZE))}"
          
          curl -X PUT \
            "https://${API_HOST}/regions/${REGION_ID}/api/v1/admin/storage/proxy/control/v1/tenant/${TENANT_ID}/shard_split" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer ${API_KEY}" \
            --data "{\"new_shard_count\": $((SHARD_COUNT)), \"new_stripe_size\": $((STRIPE_SIZE))}"
        fi

      env:
        API_HOST: ${{ inputs.api_host }}
        API_KEY: ${{ inputs.api_key }}
        REGION_ID: ${{ inputs.region_id }}
        POSTGRES_VERSION: ${{ inputs.postgres_version }}
        MIN_CU: ${{ fromJSON(inputs.compute_units)[0] }}
        MAX_CU: ${{ fromJSON(inputs.compute_units)[1] }}
        SHARD_SPLIT_PROJECT: ${{ inputs.shard-split-project }}
        SHARD_COUNT: ${{ inputs.shard-count }}
        STRIPE_SIZE: ${{ inputs.stripe-size }}
        PSQL: /tmp/neon/pg_install/v16/bin/psql
        LD_LIBRARY_PATH: /tmp/neon/pg_install/v16/lib
